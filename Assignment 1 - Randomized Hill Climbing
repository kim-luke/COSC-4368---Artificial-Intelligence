#include <iostream>
#include <string>
#include <stdlib.h>
#include <ctime>
using namespace std;

// Generates random numbers in the given z range
// If decider is 1, then the generated number stays positive
float generateRands(float radius) {
	float generatedNum = (float(rand()) / float((RAND_MAX)) * radius);
	int decider = (rand() % 2);

	if (decider == 1) {
		return generatedNum;
	}

	else {
		generatedNum = 0 - generatedNum;
		return generatedNum;
	}		
}

void randomizedHillClimbing(float x, float y, int neighborCount, float radius, int seed) {

	srand(seed);

	// Stores our answers
	float answer = 0;

	// Stores the current best (smallest) solution
	float currentMin = 999;

	float curX = 0;
	float curY = 0;
	float bestX = 0;
	float bestY = 0;
	float z1 = 0;
	float z2 = 0;
	int solutionCount = 0;

	// We put x and y into the function below and get an answer
	answer = ((((x * x) + y - 11) * ((x * x) + y - 11)) + ((x + (y * y) - 7) * (x + (y * y) - 7)));

	// Given that answer is smaller than our current best solution
	// Saves the current x and current y, and increments solutionCount
	if (answer < currentMin) {
		currentMin = answer;
		bestX = x;
		bestY = y;
		solutionCount++;
	}
	
	z1 = generateRands(radius);
	z2 = generateRands(radius);

	curX = x;
	curY = y;
	curX += z1;
	curY += z2;

	// Runs for one less than the neighborCount due to the previous first run
	while (curX <= 6 && curY <= 6) {
		for (int i = 0; i < neighborCount - 1; i++) {
			answer = ((((curX * curX) + curY - 11) * ((curX * curX) + curY - 11)) + ((curX + (curY * curY) - 7) * (curX + (curY * curY) - 7)));

			if (answer < currentMin) {
				currentMin = answer;
				bestX = curX;
				bestY = curY;
				solutionCount++;
			}

			z1 = generateRands(radius);
			z2 = generateRands(radius);

			curX += z1;
			curY += z2;
			/*cout << "current x " << curX << endl;
			cout << "z1 " << z1 << endl;

			cout << "current y " << curY << endl;
			cout << "z2 " << z2 << endl;
			cout << endl; */
		}
	}

	cout << "This run contains the starting point: " << "(" << x << "," << y << ")" << ", a neighbor count of: " << neighborCount << ", and a radius of: " << radius << endl;
	cout << "The number of solutions we found is: " << solutionCount << endl;
	cout << "The best solution found is: " << "x = " << bestX << " y = " << bestY << endl;
	cout << endl;
}  

int main() {
	float startPoints[8] = {2.9, 3.2, -2.5, 3.2, 4.2, -2, 0, 0};
	int neighborCount[2] = { 30, 120 };
	float radius[2] = { 0.03, 0.1 };
	int seed[2] = { 12345123, 1241};

	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[0], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[0], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[0], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[0], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[1], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[1], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[1], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[0], startPoints[1], neighborCount[1], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[0], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[0], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[0], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[0], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[1], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[1], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[1], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[2], startPoints[3], neighborCount[1], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[0], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[0], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[0], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[0], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[1], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[1], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[1], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[4], startPoints[5], neighborCount[1], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[0], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[0], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[0], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[0], radius[1], seed[1]);

	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[1], radius[0], seed[0]);
	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[1], radius[0], seed[1]);

	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[1], radius[1], seed[0]);
	randomizedHillClimbing(startPoints[6], startPoints[7], neighborCount[1], radius[1], seed[1]);
	
	system("pause");
	return 0;
}
