/*
	Luke Kim - 1478875
	COSC 4368: Fundamentals of Artificial Intelligence â€“ Assignment 1 - Problem 5
	Due: February 22, 2020

	This program will read .csv files, and store their data as inputs.
	Using the data, the program will assign colors based on if
	certain states are adjacent.
*/

#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
using namespace std;

void storeGraph(ifstream& file, string**& array, int rowSize, int colSize) {

	string line = "";
	string field = "";
	for (int i = 0; i < rowSize; i++) {

		getline(file, line);
		stringstream iss(line);

		for (int j = 0; j < colSize; j++) {

			getline(iss, field, ',');
			
			array[i][j] = field;
		}
	}
}

void showGraph(string** array, int rowSize, int colSize) {
	for (int i = 0; i < rowSize; i++) {
		for (int j = 0; j < colSize; j++) {
			cout << array[i][j] << " ";
		}
		cout << endl;
	}
}

void colorGraphing(string** array, string** colorArray, int rowSize, int colSize, string colors[]) {
	for (int i = 0; i < rowSize; i++) {
		for (int j = 0; j < colSize; j++) {
			if (array[i][j] == "0" || array[i][j] == "1") {

				for (int k = 0; k < rowSize - 1; k++) {
					for (int l = 0; l < colSize - 1; l++) {

						if (colorArray[k][l] == "0" && colorArray[k][l-1] != colors[0]) {
							colorArray[k][l] = colors[0];
						}

						else if (colorArray[k][l] == "0" && colorArray[k][l - 1] == colors[0]) {
							
							colorArray[k][l] == colors[1];
						}

						else if (colorArray[k][l] == "0" && colorArray[k][l - 1] == colors[1]) {
							colorArray[k][l] == colors[2];
						}

						else if (colorArray[k][l] == "0" && colorArray[k][l - 1] == colors[2]) {
							colorArray[k][l] == colors[3];
						}
						
					}
				}
			}
		}
	}
}

int main() {
	
	string line;
	int lineCount = 0;
	int colorCount = 0;
	string colors[] = { "red", "green", "blue", "yellow" };

	ifstream csv;
	csv.open("matrix_aust.csv");

	while (getline(csv, line)) {
		lineCount++;
	}

	csv.close();

	int rowSize = lineCount;
	int colSize = lineCount;

	string** array = new string*[rowSize];
	for (int i = 0; i < rowSize; i++) {
		array[i] = new string[colSize];
	}

	string** colorArray = new string*[rowSize - 1];
	for (int j = 0; j < rowSize - 1; j++) {
		colorArray[j] = new string[colSize];
	}

	for (int k = 0; k < rowSize - 1; k++) {
		for (int l = 0; l < colSize - 1; l++) {
			colorArray[k][l] = "0";
		}
	}

	ifstream csv2;
	csv2.open("matrix_aust.csv");
	storeGraph(csv2, array, rowSize, colSize);
	showGraph(array, rowSize, colSize);
	colorGraphing(array, colorArray, rowSize, colSize, colors);

	for (int a = 0; a < rowSize - 1; a++) {
		for (int b = 0; b < colSize - 1; b++) {
			cout << colorArray[a][b] << " ";
		}
		cout << endl;
	}

	csv2.close();
	system("pause");
	return 0;
}
